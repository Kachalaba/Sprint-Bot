"""Admin panel handlers providing role and group management."""

from __future__ import annotations

import logging

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from filters import RoleFilter
from role_service import ROLE_ADMIN, ROLE_ATHLETE, ROLE_TRAINER, RoleService

logger = logging.getLogger(__name__)
router = Router()


class AdminStates(StatesGroup):
    """FSM states for role assignment flows."""

    waiting_user_id = State()
    waiting_role_choice = State()
    waiting_athlete_id = State()
    waiting_trainer_choice = State()


def _admin_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin:users")],
            [
                InlineKeyboardButton(
                    text="üéØ –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å", callback_data="admin:set"
                )
            ],
            [
                InlineKeyboardButton(
                    text="ü§ù –¢—Ä–µ–Ω–µ—Ä —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—É", callback_data="admin:bind"
                )
            ],
        ]
    )


async def _answer(
    event: types.Message | types.CallbackQuery,
    text: str,
    *,
    reply_markup: InlineKeyboardMarkup | None = None,
) -> None:
    if isinstance(event, types.Message):
        await event.answer(text, reply_markup=reply_markup)
    else:
        await event.message.answer(text, reply_markup=reply_markup)
        await event.answer()


@router.message(Command("admin"), RoleFilter(ROLE_ADMIN))
@router.callback_query(RoleFilter(ROLE_ADMIN), F.data == "menu_admin")
async def open_admin_panel(
    event: types.Message | types.CallbackQuery, state: FSMContext
) -> None:
    """Show root admin menu."""

    await state.clear()
    await _answer(
        event,
        "<b>–ê–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—å</b>\n"
        "–ö–µ—Ä—É–π—Ç–µ —Ä–æ–ª—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–∞–π—Ç–µ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º.",
        reply_markup=_admin_keyboard(),
    )


@router.callback_query(RoleFilter(ROLE_ADMIN), F.data == "admin:users")
async def list_users(cb: types.CallbackQuery, role_service: RoleService) -> None:
    """Display current users grouped by roles."""

    users = await role_service.list_users()
    if not users:
        await cb.message.answer("–°—Ö–æ–∂–µ, —É –±–∞–∑—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        await cb.answer()
        return

    lines: list[str] = ["<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Ä–æ–ª—è–º–∏</b>"]
    current_role: str | None = None
    for user in users:
        if user.role != current_role:
            current_role = user.role
            lines.append(f"\n<b>{current_role.title()}:</b>")
        lines.append(f"‚Ä¢ {user.short_label}")
    await cb.message.answer("\n".join(lines))
    await cb.answer()


@router.callback_query(RoleFilter(ROLE_ADMIN), F.data == "admin:set")
async def ask_user_for_role(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Ask admin to provide user id for role change."""

    await state.set_state(AdminStates.waiting_user_id)
    await cb.message.answer("–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ:")
    await cb.answer()


@router.message(AdminStates.waiting_user_id, RoleFilter(ROLE_ADMIN))
async def select_role_target(
    message: types.Message, state: FSMContext, role_service: RoleService
) -> None:
    """Store target user id and prompt for new role."""

    try:
        user_id = int(message.text.strip())
    except (TypeError, ValueError):
        await message.answer("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(target_id=user_id)
    user = next(
        (u for u in await role_service.list_users() if u.telegram_id == user_id), None
    )
    if user is None:
        await message.answer(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ –Ω–µ –±—É–ª–æ –≤ –±–∞–∑—ñ. –ü—ñ—Å–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ –≤—ñ–Ω –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π."
        )

    buttons = [
        InlineKeyboardButton(text="üëü –°–ø–æ—Ä—Ç—Å–º–µ–Ω", callback_data="admin:role:athlete"),
        InlineKeyboardButton(text="ü•á –¢—Ä–µ–Ω–µ—Ä", callback_data="admin:role:trainer"),
        InlineKeyboardButton(text="üõ° –ê–¥–º—ñ–Ω", callback_data="admin:role:admin"),
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=[[btn] for btn in buttons])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–ª—å:", reply_markup=markup)
    await state.set_state(AdminStates.waiting_role_choice)


@router.callback_query(
    AdminStates.waiting_role_choice,
    RoleFilter(ROLE_ADMIN),
    F.data.startswith("admin:role:"),
)
async def apply_role_change(
    cb: types.CallbackQuery, state: FSMContext, role_service: RoleService
) -> None:
    """Persist selected role for target user."""

    data = await state.get_data()
    user_id = data.get("target_id")
    if not user_id:
        await cb.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", show_alert=True)
        return

    role = cb.data.split(":", 2)[-1]
    mapping = {
        "athlete": ROLE_ATHLETE,
        "trainer": ROLE_TRAINER,
        "admin": ROLE_ADMIN,
    }
    if role not in mapping:
        await cb.answer("–ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å.", show_alert=True)
        return

    await role_service.set_role(int(user_id), mapping[role])
    await cb.message.answer(
        f"‚úÖ –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id}</code> –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {mapping[role]}"
    )
    await state.clear()
    await cb.answer()


@router.callback_query(RoleFilter(ROLE_ADMIN), F.data == "admin:bind")
async def ask_athlete(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Request athlete id to assign a trainer."""

    await state.set_state(AdminStates.waiting_athlete_id)
    await cb.message.answer("–í–≤–µ–¥—ñ—Ç—å ID —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞:")
    await cb.answer()


@router.message(AdminStates.waiting_athlete_id, RoleFilter(ROLE_ADMIN))
async def choose_trainer(
    message: types.Message, state: FSMContext, role_service: RoleService
) -> None:
    """Show list of trainers for selected athlete."""

    try:
        athlete_id = int(message.text.strip())
    except (TypeError, ValueError):
        await message.answer("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    athletes = await role_service.list_users(roles=(ROLE_ATHLETE,))
    if not any(user.telegram_id == athlete_id for user in athletes):
        await message.answer(
            "–°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–µ—Ä—à—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –π–æ–≥–æ."
        )
        return

    trainers = await role_service.list_users(roles=(ROLE_TRAINER, ROLE_ADMIN))
    if not trainers:
        await message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.")
        return

    await state.update_data(athlete_id=athlete_id)
    rows = [
        [
            InlineKeyboardButton(
                text=user.short_label, callback_data=f"admin:trainer:{user.telegram_id}"
            )
        ]
        for user in trainers
    ]
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –∑—ñ —Å–ø–∏—Å–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows),
    )
    await state.set_state(AdminStates.waiting_trainer_choice)


@router.callback_query(
    AdminStates.waiting_trainer_choice,
    RoleFilter(ROLE_ADMIN),
    F.data.startswith("admin:trainer:"),
)
async def apply_trainer_binding(
    cb: types.CallbackQuery, state: FSMContext, role_service: RoleService
) -> None:
    """Assign selected trainer to athlete."""

    data = await state.get_data()
    athlete_id = data.get("athlete_id")
    if not athlete_id:
        await cb.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞.", show_alert=True)
        return

    trainer_id = int(cb.data.split(":", 2)[-1])
    await role_service.set_trainer(int(athlete_id), trainer_id)
    await cb.message.answer(
        "‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–∞ <code>{trainer}</code> –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ <code>{athlete}</code>".format(
            trainer=trainer_id,
            athlete=athlete_id,
        )
    )
    await state.clear()
    await cb.answer()
