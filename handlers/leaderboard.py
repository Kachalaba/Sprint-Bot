from __future__ import annotations

from aiogram import Router, types
from aiogram.filters import Command

from services.stats_service import StatsPeriod, StatsService
from utils import fmt_time

router = Router()

LEADERBOARD_LIMIT = 10

PERIOD_TITLES = {
    StatsPeriod.WEEK: "–Ω–µ–¥–µ–ª–∏",
    StatsPeriod.MONTH: "–º–µ—Å—è—Ü–∞",
}

STROKE_LABELS = {
    "freestyle": "–∫—Ä–æ–ª—å",
    "backstroke": "—Å–ø–∏–Ω–∞",
    "butterfly": "–±–∞—Ç–µ—Ä—Ñ–ª—è–π",
    "breaststroke": "–±—Ä–∞—Å",
    "medley": "–∫–æ–º–ø–ª–µ–∫—Å",
}


def _parse_period(message: types.Message) -> StatsPeriod | None:
    text = (message.text or "").strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        return None
    raw = parts[1].strip().lower()
    if raw == StatsPeriod.WEEK.value:
        return StatsPeriod.WEEK
    if raw == StatsPeriod.MONTH.value:
        return StatsPeriod.MONTH
    return None


@router.message(Command("leaders"))
async def show_leaders(message: types.Message, stats_service: StatsService) -> None:
    period = _parse_period(message)
    if period is None:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /leaders week –∏–ª–∏ /leaders month")
        return

    progress_msg = await message.answer("‚è≥ –°—á–∏—Ç–∞—é —Ä–µ–π—Ç–∏–Ω–≥‚Ä¶")
    entries = await stats_service.leaderboard(period, limit=LEADERBOARD_LIMIT)
    if not entries:
        await progress_msg.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    title = PERIOD_TITLES.get(period, period.value)
    lines = [f"üèÜ –õ–∏–¥–µ—Ä—ã {title}:"]
    for idx, entry in enumerate(entries, start=1):
        lines.append(
            f"{idx}. {entry.athlete_name} ‚Äî {entry.pr_count} PR, {entry.attempts} –ø–æ–ø—ã—Ç–æ–∫"
        )
    await progress_msg.edit_text("\n".join(lines))


@router.message(Command("my_progress_week"))
async def my_progress_week(message: types.Message, stats_service: StatsService) -> None:
    user = message.from_user
    if user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    progress_msg = await message.answer("‚è≥ –°–∫–∞–Ω–∏—Ä—É—é —Ç–≤–æ—é –Ω–µ–¥–µ–ª—é‚Ä¶")
    summary = await stats_service.weekly_progress(user.id)
    if summary.attempts == 0:
        await progress_msg.edit_text("–ó–∞ 7 –¥–Ω–µ–π –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Ä–∞ –≤ –±–∞—Å—Å–µ–π–Ω! üí™")
        return

    lines = [
        "üìä –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏:",
        f"–ü–æ–ø—ã—Ç–∫–∏: {summary.attempts}",
        f"PR: {summary.pr_count}",
    ]

    if summary.highlights:
        lines.append("üî• –õ—É—á—à–∏–µ –∑–∞–ø–ª—ã–≤—ã:")
        for result in summary.highlights:
            prefix = "‚≠ê" if result.is_pr else "‚Ä¢"
            stroke_label = STROKE_LABELS.get(result.stroke, result.stroke)
            lines.append(
                f"{prefix} {result.distance} –º {stroke_label} ‚Äî {fmt_time(result.total_seconds)}"
            )
    else:
        lines.append("–ü–æ–∫–∞ –±–µ–∑ –≤—ã–¥–∞—é—â–∏—Ö—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

    await progress_msg.edit_text("\n".join(lines))
