"""Sprint-related handlers and UI helpers.

–ü—Ä–∏–∫–ª–∞–¥ –≤–∑–∞—î–º–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:

1. –ù–∞—Ç–∏—Å–∫–∞—î ¬´–î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚ûï¬ª ‚Üí –±–æ—Ç –ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π.
2. –û–±–∏—Ä–∞—î ¬´üî• 100 –º –∫—Ä–æ–ª—å¬ª —ñ–∑ —à–∞–±–ª–æ–Ω—ñ–≤ ‚Üí –±–æ—Ç –æ–¥—Ä–∞–∑—É –ø—Ä–æ—Å–∏—Ç—å —á–∞—Å –ø–µ—Ä—à–æ–≥–æ –≤—ñ–¥—Ä—ñ–∑–∫—É.
3. –í–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ ``0:32.45`` ‚Üí –±–æ—Ç –ø—ñ–¥–∫–∞–∑—É—î –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤—ñ–¥—Ä—ñ–∑–∫–∏.
4. –û—Ç—Ä–∏–º—É—î –ø—ñ–¥—Å—É–º–æ–∫ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º —Ç–∞ –∫–Ω–æ–ø–∫—É ¬´üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç¬ª.
5. –ù–∞—Ç–∏—Å–∫–∞—î ¬´üîÅ¬ª ‚Üí –±–æ—Ç –¥—É–±–ª—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –Ω–æ–≤–∏–º —á–∞—Å–æ–º —Ç–∞ –∞–Ω–∞–ª—ñ–∑–æ–º.
"""

from __future__ import annotations

import json
import logging
from dataclasses import dataclass
from datetime import datetime, timezone
from typing import Any, Iterable

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from keyboards import (
    DistanceCB,
    RepeatCB,
    StrokeCB,
    TemplateCB,
    get_distance_keyboard,
    get_repeat_keyboard,
    get_stroke_keyboard,
    get_template_keyboard,
)
from services import ADMIN_IDS, ws_athletes, ws_log, ws_pr, ws_results
from utils import AddResult, fmt_time, get_segments, parse_time, pr_key, speed

router = Router()


@dataclass(frozen=True)
class SprintTemplate:
    """Describe reusable sprint presets."""

    template_id: str
    title: str
    dist: int
    stroke: str
    hint: str


SPRINT_TEMPLATES: tuple[SprintTemplate, ...] = (
    SprintTemplate(
        template_id="50_free",
        title="‚ö°Ô∏è 50 –º –∫—Ä–æ–ª—å",
        dist=50,
        stroke="freestyle",
        hint="4√ó12.5 –º ‚Äî –≤–∏–±—É—Ö–æ–≤–∏–π —Å—Ç–∞—Ä—Ç —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π —Ñ—ñ–Ω—ñ—à.",
    ),
    SprintTemplate(
        template_id="100_free",
        title="üî• 100 –º –∫—Ä–æ–ª—å",
        dist=100,
        stroke="freestyle",
        hint="4√ó25 –º. –î—Ä—É–≥–∏–π –≤—ñ–¥—Ä—ñ–∑–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π, —Ç—Ä–µ—Ç—ñ–π ‚Äî –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è.",
    ),
    SprintTemplate(
        template_id="100_fly",
        title="ü¶ã 100 –º –±–∞—Ç–µ—Ä—Ñ–ª—è–π",
        dist=100,
        stroke="butterfly",
        hint="4√ó25 –º. –¢—Ä–∏–º–∞–π—Ç–µ —Å—Ç–∞–±—ñ–ª—å–Ω—É —Ç–µ—Ö–Ω—ñ–∫—É –π —Ç–µ–º–ø.",
    ),
    SprintTemplate(
        template_id="200_mixed",
        title="ü•á 200 –º –∫–æ–º–ø–ª–µ–∫—Å",
        dist=200,
        stroke="medley",
        hint="–ü–æ 50 –º –Ω–∞ —Å—Ç–∏–ª—å: –±–∞—Ç–µ—Ä—Ñ–ª—è–π, —Å–ø–∏–Ω–∞, –±—Ä–∞—Å, –∫—Ä–æ–ª—å.",
    ),
)

TEMPLATE_MAP = {template.template_id: template for template in SPRINT_TEMPLATES}

# (coach_id, athlete_id) -> stored data for quick repeat
LAST_RESULTS: dict[tuple[int, int], dict[str, Any]] = {}


def _segment_prompt(idx: int, length: float) -> str:
    """Return formatted prompt for segment input."""

    distance = f"{length:g}"
    return (
        f"–ß–∞—Å –≤—ñ–¥—Ä—ñ–∑–∫—É #{idx + 1} ({distance} –º).\n"
        "–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: 0:32.45 –∞–±–æ 32.45"
    )


def _persist_result(
    athlete_id: int,
    athlete_name: str,
    stroke: str,
    dist: int,
    splits: Iterable[float],
) -> tuple[float, list[tuple[int, float]], str]:
    """Save result to Google Sheets and return totals."""

    splits_list = list(splits)
    total = sum(splits_list)
    timestamp = datetime.now(timezone.utc).isoformat(sep=" ", timespec="seconds")

    ws_results.append_row(
        [
            athlete_id,
            athlete_name,
            stroke,
            dist,
            timestamp,
            json.dumps(splits_list),
            total,
        ]
    )
    ws_log.append_row([athlete_id, timestamp, "ADD", json.dumps(splits_list)])

    new_prs: list[tuple[int, float]] = []
    for idx, seg_time in enumerate(splits_list):
        key = pr_key(athlete_id, stroke, dist, idx)
        cell = ws_pr.find(key)
        if not cell:
            ws_pr.append_row([key, seg_time, timestamp])
            new_prs.append((idx, seg_time))
            continue

        old = float(ws_pr.cell(cell.row, 2).value.replace(",", "."))
        if seg_time < old:
            ws_pr.update(f"A{cell.row}:C{cell.row}", [[key, seg_time, timestamp]])
            new_prs.append((idx, seg_time))

    return total, new_prs, timestamp


def _analysis_text(dist: int, splits: list[float], total: float) -> str:
    """Compose analysis block for the result."""

    seg_lens = get_segments(dist)
    speeds = [speed(seg, t) for seg, t in zip(seg_lens, splits)]
    avg_speed = speed(dist, total)
    pace = total / dist * 100 if dist else 0
    degradation = (
        (speeds[0] - speeds[-1]) / speeds[0] * 100
        if len(speeds) > 1 and speeds[0]
        else 0
    )

    segments_line = " ‚Ä¢ ".join(f"{v:.2f} –º/—Å" for v in speeds)

    return (
        "üìä <b>–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É</b>\n"
        f"‚Ä¢ –®–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö: {segments_line}\n"
        f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å: {avg_speed:.2f} –º/—Å\n"
        f"‚Ä¢ –¢–µ–º–ø: {pace:.1f} —Å–µ–∫/100 –º\n"
        f"‚Ä¢ –î–µ–≥—Ä–∞–¥–∞—Ü—ñ—è —Ç–µ–º–ø—É: {degradation:.1f}%"
    )


@router.callback_query(F.data == "add")
async def add(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Start collecting sprint result."""

    await cb.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        reply_markup=get_distance_keyboard(),
    )
    await state.set_state(AddResult.choose_dist)


@router.callback_query(DistanceCB.filter(), AddResult.choose_dist)
async def distance_selected(
    cb: types.CallbackQuery, callback_data: DistanceCB, state: FSMContext
) -> None:
    """Handle distance choice from keyboard."""

    await cb.answer()
    dist = callback_data.value
    await state.update_data(dist=dist, splits=[], idx=0)
    await cb.message.answer(
        f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è {dist} –º. –û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å:", reply_markup=get_stroke_keyboard()
    )
    await state.set_state(AddResult.waiting_for_stroke)


@router.callback_query(F.data == "manual_distance", AddResult.choose_dist)
async def manual_distance(cb: types.CallbackQuery) -> None:
    """Prompt manual distance entry."""

    await cb.answer()
    await cb.message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é —Ü–∏—Ñ—Ä–∞–º–∏ —É –º–µ—Ç—Ä–∞—Ö. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 75, 125 –∞–±–æ 300.",
    )


@router.callback_query(F.data == "choose_template", AddResult.choose_dist)
async def choose_template(cb: types.CallbackQuery) -> None:
    """Show list of sprint templates."""

    await cb.answer()
    template_pairs = ((tpl.template_id, tpl.title) for tpl in SPRINT_TEMPLATES)
    await cb.message.answer(
        "üìã –®–∞–±–ª–æ–Ω–∏ —Å–ø—Ä–∏–Ω—Ç—ñ–≤. –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π:",
        reply_markup=get_template_keyboard(template_pairs),
    )


@router.callback_query(F.data == "back_to_distance")
async def back_to_distance(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Return to distance selection keyboard."""

    await cb.answer()
    await cb.message.answer(
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó:",
        reply_markup=get_distance_keyboard(),
    )
    await state.set_state(AddResult.choose_dist)


@router.callback_query(TemplateCB.filter(), AddResult.choose_dist)
async def template_selected(
    cb: types.CallbackQuery, callback_data: TemplateCB, state: FSMContext
) -> None:
    """Handle template selection and jump straight to time collection."""

    template = TEMPLATE_MAP.get(callback_data.template_id)
    if not template:
        await cb.answer("–®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    await cb.answer()
    segs = get_segments(template.dist)
    await state.update_data(
        dist=template.dist,
        splits=[],
        idx=0,
        stroke=template.stroke,
        template_id=template.template_id,
    )
    await state.set_state(AddResult.collect)
    hint = f"üí° {template.hint}" if template.hint else ""
    await cb.message.answer(
        "‚úÖ –û–±—Ä–∞–Ω–æ —à–∞–±–ª–æ–Ω ¬´{title}¬ª.\n{hint}\n{prompt}".format(
            title=template.title,
            hint=hint,
            prompt=_segment_prompt(0, segs[0]),
        )
    )


@router.message(AddResult.choose_dist)
async def dist_chosen(message: types.Message, state: FSMContext) -> None:
    """Handle chosen distance."""

    try:
        dist = int(message.text)
    except ValueError:
        return await message.reply("‚ùó –î–∏—Å—Ç–∞–Ω—Ü—ñ—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º —É –º–µ—Ç—Ä–∞—Ö. –ü—Ä–∏–∫–ª–∞–¥: 75")
    if dist <= 0:
        return await message.reply("‚ùó –î–∏—Å—Ç–∞–Ω—Ü—ñ—è –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å.")
    await state.update_data(dist=dist, splits=[], idx=0)
    await message.answer(
        f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è {dist} –º. –û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å:", reply_markup=get_stroke_keyboard()
    )
    await state.set_state(AddResult.waiting_for_stroke)


@router.callback_query(StrokeCB.filter())
async def stroke_chosen(
    cb: types.CallbackQuery, callback_data: StrokeCB, state: FSMContext
) -> None:
    """Save stroke and ask for first split."""

    await cb.answer()
    await state.update_data(stroke=callback_data.stroke)
    data = await state.get_data()
    dist = data["dist"]
    segs = get_segments(dist)
    await cb.message.answer(_segment_prompt(0, segs[0]))
    await state.set_state(AddResult.collect)


@router.message(AddResult.collect)
async def collect(message: types.Message, state: FSMContext) -> None:
    """Collect segment times and save result."""

    data = await state.get_data()
    athlete_id = data.get("athlete_id", message.from_user.id)
    dist, idx, splits = data["dist"], data["idx"], data["splits"]
    segs = get_segments(dist)
    try:
        t = parse_time(message.text)
    except Exception:
        return await message.reply("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥–∏: 0:32.45 –∞–±–æ 32.45")
    splits.append(t)
    if idx + 1 < len(segs):
        await state.update_data(idx=idx + 1, splits=splits)
        await message.answer(_segment_prompt(idx + 1, segs[idx + 1]))
        return
    await state.clear()
    stroke = data.get("stroke", "freestyle")
    try:
        total, new_prs, _ = _persist_result(
            athlete_id,
            message.from_user.full_name,
            stroke,
            dist,
            splits,
        )
    except Exception as exc:
        logging.error("Failed to save result to Google Sheets: %s", exc, exc_info=True)
        return await message.answer(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
    txt = (
        f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ! –ó–∞–≥–∞–ª—å–∏–π —á–∞—Å <b>{fmt_time(total)}</b>\n"
        f"–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å {speed(dist, total):.2f} –º/—Å"
    )
    if new_prs:
        txt += "\n" + "\n".join(
            f"ü•≥ –ù–æ–≤–∏–π PR —Å–µ–≥–º–µ–Ω—Ç—É #{i+1}: {fmt_time(t)}" for i, t in new_prs
        )
    await message.answer(
        txt,
        parse_mode="HTML",
        reply_markup=get_repeat_keyboard(athlete_id),
    )

    analysis_text = _analysis_text(dist, splits, total)
    await message.answer(analysis_text, parse_mode="HTML")

    LAST_RESULTS[(message.from_user.id, athlete_id)] = {
        "athlete_id": athlete_id,
        "athlete_name": message.from_user.full_name,
        "stroke": stroke,
        "dist": dist,
        "splits": list(splits),
    }


@router.callback_query(RepeatCB.filter())
async def repeat_previous(cb: types.CallbackQuery, callback_data: RepeatCB) -> None:
    """Duplicate the previously saved result for faster logging."""

    key = (cb.from_user.id, callback_data.athlete_id)
    payload = LAST_RESULTS.get(key)
    if not payload:
        await cb.answer("–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É", show_alert=True)
        return

    await cb.answer()
    try:
        total, new_prs, _ = _persist_result(
            payload["athlete_id"],
            payload["athlete_name"],
            payload["stroke"],
            payload["dist"],
            payload["splits"],
        )
    except Exception as exc:
        logging.error("Failed to repeat result: %s", exc, exc_info=True)
        await cb.message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    dist = payload["dist"]
    txt = (
        "üîÅ –ü—Ä–æ–¥—É–±–ª—å–æ–≤–∞–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å <b>{fmt_time(total)}</b>\n"
        f"–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å {speed(dist, total):.2f} –º/—Å"
    )
    if new_prs:
        txt += "\n" + "\n".join(
            f"ü•≥ –ù–æ–≤–∏–π PR —Å–µ–≥–º–µ–Ω—Ç—É #{i+1}: {fmt_time(t)}" for i, t in new_prs
        )

    await cb.message.answer(
        txt,
        parse_mode="HTML",
        reply_markup=get_repeat_keyboard(payload["athlete_id"]),
    )

    analysis_text = _analysis_text(dist, payload["splits"], total)
    await cb.message.answer(analysis_text, parse_mode="HTML")


@router.callback_query(F.data == "history")
async def history(cb: types.CallbackQuery) -> None:
    """Show history of results for user."""

    try:
        rows = ws_results.get_all_values()[::-1]
        out = []
        processed_count = 0
        for row in rows:
            if row and str(row[0]) == str(cb.from_user.id):
                try:
                    dist = int(row[3])
                    splits = json.loads(row[5])
                    date = row[4]

                    out.append(f"<b>{date} | {dist} –º:</b>")

                    for i, t in enumerate(splits):
                        try:
                            segment_speed = speed(get_segments(dist)[i], float(t))
                            out.append(
                                f"  - –í—ñ–¥—Ä—ñ–∑–æ–∫ {i+1}: {fmt_time(float(t))} (—à–≤–∏–¥–∫—ñ—Å—Ç—å: {segment_speed:.2f} –º/—Å)"
                            )
                        except IndexError:
                            out.append(
                                f"  - –í—ñ–¥—Ä—ñ–∑–æ–∫ {i+1}: {fmt_time(float(t))} (–ü–û–ú–ò–õ–ö–ê: –∑–∞–π–≤–∏–π –≤—ñ–¥—Ä—ñ–∑–æ–∫)"
                            )

                    out.append("-" * 20)
                    processed_count += 1

                except (ValueError, json.JSONDecodeError, IndexError) as e:
                    logging.warning(
                        "Skipping malformed row for user %s: %s. Error: %s",
                        cb.from_user.id,
                        row,
                        e,
                    )
                    continue

                if processed_count >= 10:
                    out.append("...")
                    break

        await cb.message.answer(
            "\n".join(out) if out else "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—è.",
            parse_mode="HTML",
        )

    except Exception as e:
        logging.error(f"Critical error in history handler: {e}", exc_info=True)
        await cb.message.answer("–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.")


@router.callback_query(F.data == "records")
async def records(cb: types.CallbackQuery) -> None:
    """Display personal records."""

    rows = ws_pr.get_all_values()
    best = {}
    for row in rows:
        try:
            uid, _, dist, _ = row[0].split("|")
            if int(uid) == cb.from_user.id:
                dist_key = int(dist)
                best.setdefault(dist_key, []).append(float(row[1].replace(",", ".")))
        except (ValueError, IndexError):
            continue

    if not best:
        return await cb.answer("–ù–µ–º–∞—î —Ä–µ–∫–æ—Ä–¥—ñ–≤.")

    lines = []
    for dist, arr in sorted(best.items()):
        total = sum(arr)
        lines.append(
            f"üèÖ {dist} –º ‚Üí {fmt_time(total)} (—Å—É–º–∞ –Ω–∞–π–∫—Ä–∞—â–∏—Ö)\n"
            + " ‚Ä¢ ".join(fmt_time(t) for t in arr)
        )
    await cb.message.answer("\n\n".join(lines))


@router.callback_query(F.data == "admin")
async def admin(cb: types.CallbackQuery) -> None:
    """Admin placeholder."""

    if str(cb.from_user.id) not in ADMIN_IDS:
        return
    await cb.message.answer("–ê–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—å —É –ø—Ä–æ—Ü–µ—Å—ñ. –î–∞–Ω—ñ –≤–∏–¥–Ω–æ –≤ Google Sheets.")


@router.callback_query(F.data == "menu_sprint")
async def menu_sprint(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Show list of athletes for result entry."""

    try:
        records = ws_athletes.get_all_records()
    except Exception as e:
        logging.error(f"Failed to get athletes list: {e}")
        return await cb.message.answer(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )

    buttons = []
    for rec in records:
        athlete_id = rec["ID"]
        athlete_name = rec.get("Name", str(athlete_id))
        buttons.append(
            InlineKeyboardButton(
                text=athlete_name, callback_data=f"select_{athlete_id}"
            )
        )

    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await cb.message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:", reply_markup=kb)
    await state.set_state(AddResult.choose_athlete)


@router.callback_query(F.data.startswith("select_"))
async def select_athlete(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Save selected athlete and ask for distance."""

    try:
        athlete_id = int(cb.data.split("_", 1)[1])
    except ValueError:
        return await cb.message.answer("–ü–æ–º–∏–ª–∫–∞: ID —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    await state.update_data(athlete_id=athlete_id)
    await cb.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        reply_markup=get_distance_keyboard(),
    )
    await state.set_state(AddResult.choose_dist)


@router.callback_query(F.data == "menu_history")
async def menu_history(cb: types.CallbackQuery) -> None:
    """Menu alias for history."""

    await history(cb)


@router.callback_query(F.data == "menu_records")
async def menu_records(cb: types.CallbackQuery) -> None:
    """Menu alias for records."""

    await records(cb)


@router.callback_query(F.data == "menu_admin")
async def alias_admin(cb: types.CallbackQuery) -> None:
    """Menu alias for admin panel."""

    await admin(cb)


@router.callback_query(F.data == "menu_stayer")
async def menu_stayer(cb: types.CallbackQuery) -> None:
    """Notify that stayer block is under construction."""

    await cb.message.answer("üöß –ë–ª–æ–∫ ¬´–°—Ç–∞—î—Ä¬ª —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ ‚Äì —Å–∫–æ—Ä–æ –±—É–¥–µ!")
