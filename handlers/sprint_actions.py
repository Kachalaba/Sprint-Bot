from __future__ import annotations

import json
import logging
from datetime import datetime, timezone

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from keyboards import StrokeCB, get_stroke_keyboard, get_history_keyboard
from services.google_sheets import ADMIN_IDS, ws_athletes, ws_log, ws_pr, ws_results
from utils import AddResult, fmt_time, get_segments, parse_time, pr_key, speed

router = Router()


@router.callback_query(F.data == "add")
async def add(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Start collecting sprint result."""
    await cb.message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é (50/100/200/400/800/1500):")
    await state.set_state(AddResult.choose_dist)


@router.message(AddResult.choose_dist)
async def dist_chosen(message: types.Message, state: FSMContext) -> None:
    """Handle chosen distance."""
    try:
        dist = int(message.text)
        if dist not in {50, 100, 200, 400, 800, 1500}:
            raise ValueError
    except ValueError:
        return await message.reply("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
    await state.update_data(dist=dist, splits=[], idx=0)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å –ø–ª–∞–≤–∞–Ω–Ω—è:", reply_markup=get_stroke_keyboard())
    await state.set_state(AddResult.waiting_for_stroke)


@router.callback_query(StrokeCB.filter())
async def stroke_chosen(
    cb: types.CallbackQuery, callback_data: StrokeCB, state: FSMContext
) -> None:
    """Save stroke and ask for first split."""
    await state.update_data(stroke=callback_data.stroke)
    data = await state.get_data()
    dist = data["dist"]
    segs = get_segments(dist)
    await cb.message.answer(f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è {dist} –º. –ß–∞—Å –≤—ñ–¥—Ä—ñ–∑–∫—É #1 ({segs[0]} –º):")
    await state.set_state(AddResult.collect)


@router.message(AddResult.collect)
async def collect(message: types.Message, state: FSMContext) -> None:
    """Collect segment times and save result."""
    data = await state.get_data()
    athlete_id = data.get("athlete_id")
    dist, idx, splits = data["dist"], data["idx"], data["splits"]
    segs = get_segments(dist)
    try:
        t = parse_time(message.text)
    except Exception:
        return await message.reply("‚ùó –§–æ—Ä–º–∞—Ç 0:32.45 –∞–±–æ 32.45")
    splits.append(t)
    if idx + 1 < len(segs):
        await state.update_data(idx=idx + 1, splits=splits)
        await message.answer(f"–ß–∞—Å –≤—ñ–¥—Ä—ñ–∑–∫—É #{idx + 2} ({segs[idx + 1]} –º):")
        return
    await state.clear()
    total = sum(splits)
    stroke = data.get("stroke", "freestyle")
    now = datetime.now(timezone.utc).isoformat(sep=" ", timespec="seconds")
    try:
        ws_results.append_row(
            [
                athlete_id,
                message.from_user.full_name,
                stroke,
                dist,
                now,
                json.dumps(splits),
                total,
            ]
        )
        ws_log.append_row([athlete_id, now, "ADD", json.dumps(splits)])
    except Exception:
        return await message.answer(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
    new_prs = []
    for i, seg_time in enumerate(splits):
        key = pr_key(message.from_user.id, stroke, dist, i)
        cell = ws_pr.find(key) if ws_pr.findall(key) else None
        if not cell:
            ws_pr.append_row([key, seg_time, now])
            new_prs.append((i, seg_time))
        else:
            old = float(ws_pr.cell(cell.row, 2).value.replace(",", "."))
            if seg_time < old:
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê ---
                ws_pr.update(f'A{cell.row}:C{cell.row}', [[key, seg_time, now]])
                new_prs.append((i, seg_time))
    txt = (
        f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ! –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å <b>{fmt_time(total)}</b>\n"
        f"–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å {speed(dist, total):.2f} –º/—Å"
    )
    if new_prs:
        txt += "\n" + "\n".join(
            f"ü•≥ –ù–æ–≤–∏–π PR —Å–µ–≥–º–µ–Ω—Ç—É #{i+1}: {fmt_time(t)}" for i, t in new_prs
        )
    await message.answer(txt, parse_mode="HTML")
    seg_lens = get_segments(dist)
    speeds = [speed(seg, t) for seg, t in zip(seg_lens, splits)]
    avg_speed = speed(dist, total)
    pace = total / dist * 100
    degradation = (
        (speeds[0] - speeds[-1]) / speeds[0] * 100 if speeds and speeds[0] else 0
    )
    analysis_text = (
        "üìä <b>–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É</b>\n"
        f"‚Ä¢ –®–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö: "
        + " ‚Ä¢ ".join(f"{v:.2f} –º/—Å" for v in speeds)
        + "\n"
        f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å: {avg_speed:.2f} –º/—Å\n"
        f"‚Ä¢ –¢–µ–º–ø: {pace:.1f} —Å–µ–∫/100 –º\n"
        f"‚Ä¢ –î–µ–≥—Ä–∞–¥–∞—Ü—ñ—è —Ç–µ–º–ø—É: {degradation:.1f}%"
    )
    await message.answer(analysis_text, parse_mode="HTML")


@router.callback_query(F.data == "history")
async def history(cb: types.CallbackQuery) -> None:
    """Show history of results for user."""
    try:
        rows = ws_results.get_all_values()[::-1]
        out = []
        processed_count = 0
        for row in rows:
            if row and str(row[0]) == str(cb.from_user.id):
                try:
                    dist = int(row[3])
                    splits = json.loads(row[5])
                    date = row[4]
                    
                    out.append(f"<b>{date} | {dist} –º:</b>")
                    
                    for i, t in enumerate(splits):
                        try:
                            segment_speed = speed(get_segments(dist)[i], float(t))
                            out.append(
                                f"  - –í—ñ–¥—Ä—ñ–∑–æ–∫ {i+1}: {fmt_time(float(t))} (—à–≤–∏–¥–∫—ñ—Å—Ç—å: {segment_speed:.2f} –º/—Å)"
                            )
                        except IndexError:
                            out.append(
                                f"  - –í—ñ–¥—Ä—ñ–∑–æ–∫ {i+1}: {fmt_time(float(t))} (–ü–û–ú–ò–õ–ö–ê: –∑–∞–π–≤–∏–π –≤—ñ–¥—Ä—ñ–∑–æ–∫)"
                            )
                    
                    out.append("-" * 20)
                    processed_count += 1

                except (ValueError, json.JSONDecodeError, IndexError) as e:
                    logging.warning(f"Skipping malformed row for user {cb.from_user.id}: {row}. Error: {e}")
                    continue

                if processed_count >= 10:
                    out.append("...")
                    break
                    
        await cb.message.answer("\n".join(out) if out else "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—è.", parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"Critical error in history handler: {e}", exc_info=True)
        await cb.message.answer("–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.")


@router.callback_query(F.data == "records")
async def records(cb: types.CallbackQuery) -> None:
    """Display personal records."""
    rows = ws_pr.get_all_values()
    best = {}
    for row in rows:
        try:
            uid, _, dist, _ = row[0].split("|")
            if int(uid) == cb.from_user.id:
                best.setdefault(dist, []).append(float(row[1].replace(",", ".")))
        except (ValueError, IndexError):
            continue

    if not best:
        return await cb.answer("–ù–µ–º–∞—î —Ä–µ–∫–æ—Ä–¥—ñ–≤.")
    
    lines = []
    for dist, arr in sorted(best.items()):
        total = sum(arr)
        lines.append(
            f"üèÖ {dist} –º ‚Üí {fmt_time(total)} (—Å—É–º–∞ –Ω–∞–π–∫—Ä–∞—â–∏—Ö)\n"
            + " ‚Ä¢ ".join(fmt_time(t) for t in arr)
        )
    await cb.message.answer("\n\n".join(lines))


@router.callback_query(F.data == "admin")
async def admin(cb: types.CallbackQuery) -> None:
    """Admin placeholder."""
    if cb.from_user.id not in ADMIN_IDS:
        return
    await cb.message.answer("–ê–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—å —É –ø—Ä–æ—Ü–µ—Å—ñ. –î–∞–Ω—ñ –≤–∏–¥–Ω–æ –≤ Google Sheets.")


@router.callback_query(F.data == "menu_sprint")
async def menu_sprint(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Show list of athletes for result entry."""
    try:
        records = ws_athletes.get_all_records()
    except Exception:
        return await cb.message.answer(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
    
    buttons = []
    for rec in records:
        athlete_id = rec["ID"]
        athlete_name = rec.get("Name", str(athlete_id))
        buttons.append(
            InlineKeyboardButton(
                text=athlete_name, callback_data=f"select_{athlete_id}"
            )
        )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await cb.message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:", reply_markup=kb)
    await state.set_state(AddResult.choose_athlete)


@router.callback_query(F.data.startswith("select_"))
async def select_athlete(cb: types.CallbackQuery, state: FSMContext) -> None:
    """Save selected athlete and ask for distance."""
    try:
        athlete_id = int(cb.data.split("_", 1)[1])
    except ValueError:
        return await cb.message.answer("–ü–æ–º–∏–ª–∫–∞: ID —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    await state.update_data(athlete_id=athlete_id)
    await cb.message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é (50/100/200/400/800/1500):")
    await state.set_state(AddResult.choose_dist)


@router.callback_query(F.data == "menu_history")
async def menu_history(cb: types.CallbackQuery) -> None:
    """Menu alias for history."""
    await history(cb)


@router.callback__query(F.data == "menu_records")
async def menu_records(cb: types.CallbackQuery) -> None:
    """Menu alias for records."""
    await records(cb)


@router.callback_query(F.data == "menu_admin")
async def alias_admin(cb: types.CallbackQuery) -> None:
    """Menu alias for admin panel."""
    await admin(cb)


@router.callback_query(F.data == "menu_stayer")
async def menu_stayer(cb: types.CallbackQuery) -> None:
    """Notify that stayer block is under construction."""
    await cb.message.answer("üöß –ë–ª–æ–∫ ¬´–°—Ç–∞—î—Ä¬ª —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ ‚Äì —Å–∫–æ—Ä–æ –±—É–¥–µ!")
